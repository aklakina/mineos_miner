---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by levi.
--- DateTime: 2/19/2024 6:22 PM
---

-- Creating a mock testing objects
require('Logger')

local logger = Logger:new(Logger.levels.INFO, "minecraftAPI")

minecraftAPI_callHistory = {}

turtle = {
    blocked = false,
    blocks = 1,
    entityHp = 1,
    dig = function()
        logger:debug("dig function called")
        table.insert(minecraftAPI_callHistory, "turtle.dig")
        turtle.blocks = turtle.blocks - 1
        return turtle.blocks > -1
    end,
    digUp = function()
        logger:debug("digUp function called")
        table.insert(minecraftAPI_callHistory, "turtle.digUp")
        turtle.blocks = turtle.blocks - 1
        return turtle.blocks > -1
    end,
    digDown = function()
        logger:debug("digDown function called")
        table.insert(minecraftAPI_callHistory, "turtle.digDown")
        turtle.blocks = turtle.blocks - 1
        return turtle.blocks > -1
    end,
    turnLeft = function()
        logger:debug("turnLeft function called")
        table.insert(minecraftAPI_callHistory, "turtle.turnLeft")
        return true
    end,
    turnRight = function()
        logger:debug("turnRight function called")
        table.insert(minecraftAPI_callHistory, "turtle.turnRight")
        return true
    end,
    forward = function()
        logger:debug("forward function called")
        table.insert(minecraftAPI_callHistory, "turtle.forward")
        return not turtle.blocked
    end,
    back = function()
        logger:debug("back function called")
        table.insert(minecraftAPI_callHistory, "turtle.back")
        return not turtle.blocked
    end,
    up = function()
        logger:debug("up function called")
        table.insert(minecraftAPI_callHistory, "turtle.up")
        return not turtle.blocked
    end,
    down = function()
        logger:debug("down function called")
        table.insert(minecraftAPI_callHistory, "turtle.down")
        return not turtle.blocked
    end,
    attack = function()
        logger:debug("attack function called")
        table.insert(minecraftAPI_callHistory, "turtle.attack")
        turtle.entityHp = turtle.entityHp - 1
        return turtle.entityHp > 0
    end,
    getFuelLevel = function()
        logger:debug("getFuelLevel function called")
        table.insert(minecraftAPI_callHistory, "turtle.getFuelLevel")
        return 500
    end,
    refuel = function()
        logger:debug("refuel function called")
        table.insert(minecraftAPI_callHistory, "turtle.refuel")
        return true
    end,
    select = function(slot)
        logger:debug("select function called")
        table.insert(minecraftAPI_callHistory, "turtle.select")
        return true
    end,
    place = function()
        logger:debug("place function called")
        table.insert(minecraftAPI_callHistory, "turtle.place")
        return true
    end,
    getItemCount = function()
        logger:debug("getItemCount function called")
        table.insert(minecraftAPI_callHistory, "turtle.getItemCount")
        return 1
    end,
    getItemDetail = function()
        logger:debug("getItemDetail function called")
        table.insert(minecraftAPI_callHistory, "turtle.getItemDetail")
        return {name = "minecraft:cobblestone"}
    end,
    drop = function()
        logger:debug("drop function called")
        table.insert(minecraftAPI_callHistory, "turtle.drop")
        return true
    end,
}

function turtle.reset()
    minecraftAPI_callHistory = {}
    turtle.blocked = false
    turtle.blocks = 1
    turtle.entityHp = 1
end

function turtle.printCallHistory()
    logger:debug("Printing call history")
    for i, v in ipairs(minecraftAPI_callHistory) do
        logger:debug(i..": "..v)
    end
    logger:debug("Finished printing call history")
end

parallel = {
    waitForAll = function() end
}
